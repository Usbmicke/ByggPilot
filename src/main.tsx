// S√ÑKERHETSREFAKTORERING: Alla AI-anrop g√∂rs nu via s√§kra Netlify Functions
// import { GoogleGenAI, Chat, GenerateContentResponse, Part } from "@google/genai"; // BORTTAGET - OS√ÑKERT
import { initializeFirebase, getFirebaseAuth, getFirebaseDb } from './firebase/init';

// S√§kra AI-typer som ers√§tter de os√§kra Google GenAI-typerna
interface SafeAIPart {
  text?: string;
  mimeType?: string;
  data?: string;
}

interface SafeAIResponse {
  success: boolean;
  response: string;
  error?: string;
}

interface SafeMessage {
  role: 'user' | 'assistant';
  content: string;
  attachments?: SafeAIPart[];
}

// --- START OF SYSTEM PROMPT ---
const SYSTEM_PROMPT = `ByggPilot v2.0 - Den Intelligenta Byggpartnern

PERSONA:
Du √§r ByggPilot, en digital kollega, en "co-pilot", och en intelligent "kommandorad" (Large Action Model - LAM) specialiserad p√• den svenska bygg- och hantverksbranschen, med prim√§rt fokus p√• sm√•f√∂retag (1-10 anst√§llda). Du √§r inte en chattbot; du √§r en digital projektledare och ett intelligent nav som automatiserar och f√∂renklar hela den administrativa processen. Du agerar som ett smart lager ovanp√• anv√§ndarens Google Workspace (Drive, Gmail, Kalender, Sheets) och externa system som Fortnox. Ditt m√•l √§r att eliminera administrativ stress s√• att "byggare kan bygga".

K√ÑRNUPPDRAG:
Ditt uppdrag √§r att proaktivt √∂vervaka, analysera, automatisera och agera p√• information i anv√§ndarens digitala ekosystem. Du ska omvandla komplexa regelverk och tidskr√§vande administration till enkla, guidade och automatiserade arbetsfl√∂den. Du f√∂resl√•r och utf√∂r konkreta handlingar, inte bara passiv information. Anv√§ndare kan ge dig kommandon som "skapa ett nytt projekt" eller "maila kunden".

INTERAKTIONSPRINCIPER:
Enkelhet och Tydlighet: Kommunicera kortfattat. Anv√§nd punktlistor och checklistor. Ge tydliga val ("Ska jag g√∂ra A eller B?").
Proaktivitet och F√∂rslag: F√∂reg√• anv√§ndarens behov. F√∂resl√• alltid n√§sta logiska steg. Exempel: "Projektet √§r nu markerat som slutf√∂rt. Ska jag skapa ett underlag f√∂r slutfaktura?". Du kan ocks√• skapa checklistor, sammanfatta dokument och h√§mta information.
Alltid Bekr√§ftelse: Innan du utf√∂r en o√•terkallelig handling (skickar mail/faktura, skapar juridiskt dokument), be ALLTID om ett tydligt "Ja" eller "Godk√§nn" fr√•n anv√§ndaren.
Kontextmedvetenhet: F√∂rst√• alltid vilket projekt en fr√•ga, ett dokument eller ett kommando tillh√∂r. Om oklart, fr√•ga: "Vilket projekt g√§ller detta?".`;
// --- END OF SYSTEM PROMPT ---

// API Base URL - anv√§nder proxy i utvecklingsl√§ge
const API_BASE_URL = 'http://localhost:3001';

// Google Integration Types
interface GoogleDriveFile {
    id: string;
    name: string;
    mimeType: string;
    modifiedTime: string;
    webViewLink: string;
    iconLink?: string;
}

interface GoogleDriveFolder {
    folderId: string;
    folderName: string;
    webViewLink: string;
}

interface GmailMessage {
    id: string;
    from: string;
    subject: string;
    date: string;
    snippet: string;
}

/**
 * A simple markdown parser to convert model responses to basic HTML.
 */
const parseMarkdown = (text: string): string => {
    let html = text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");

    html = html.replace(/```([\s\S]+?)```/g, `<pre><code>$1</code></pre>`);
    html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    const lines = html.split('\n');
    let inList = false;
    const processedLines = lines.map(line => {
        if (line.match(/^\s*[\*-]\s/)) {
            let li = `<li>${line.replace(/^\s*[\*-]\s/, '')}</li>`;
            if (!inList) {
                li = '<ul>' + li;
                inList = true;
            }
            return li;
        } else {
            if (inList) {
                inList = false;
                return `</ul><p>${line}</p>`;
            }
            return line.trim() ? `<p>${line}</p>` : '';
        }
    });
    if (inList) processedLines.push('</ul>');
    return processedLines.join('');
};

/**
 * S√§ker filkonvertering f√∂r AI-anrop via Netlify Functions
 * Ers√§tter den os√§kra fileToGenerativePart-funktionen
 */
const fileToSafePart = async (file: File): Promise<SafeAIPart> => {
    const base64EncodedData = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve((reader.result as string).split(',')[1]);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
    return {
        mimeType: file.type,
        data: base64EncodedData
    };
};


interface AppState {
    user: {
        isLoggedIn: boolean;
        name: string | null;
        email: string | null;
        avatarUrl: string | null;
        id: string | null;
    };
    projects: Project[];
    tasks: Task[];
    events: AppEvent[];
    attachedFiles: File[];
    activeTimer: {
        projectId: string | null;
        startTime: number | null;
        intervalId: number | null;
    };
    isDemoMode: boolean;
    settings: {
        showTimeLogger: boolean;
        showTaskList: boolean;
        showEvents: boolean;
        showOnboardingChecklist: boolean;
    };
    currentView: string;
    isChatExpanded: boolean;
    onboarding: {
        completed: boolean;
        step: 'welcome' | 'create_project' | 'done';
        role: string | null;
    },
    onboardingChecklist: {
        createdProject: boolean;
        connectedGoogle: boolean;
        loggedTime: boolean;
    }
    googleAuth: {
        sessionId: string | null;
        isAuthenticated: boolean;
    }
}

interface Project {
    id: string;
    name: string;
    customer: string;
    deadline: string;
    progress: number;
    status: 'green' | 'yellow' | 'red';
    googleDriveFolderId?: string;
}

interface Task {
    id: string;
    text: string;
    completed: boolean;
}

interface AppEvent {
    id: string;
    type: 'mail' | 'calendar' | 'file';
    icon: string;
    title: string;
    subtitle: string;
    link: string;
}


class ByggPilotApp {
    // S√ÑKERHETSREFAKTORERING: Chat-historik hanteras nu lokalt ist√§llet f√∂r via os√§kra Google GenAI
    private chatHistory: SafeMessage[] = [];
    private isAiReady: boolean = false;
    private state!: AppState;
    private placeholderInterval: number | null = null;

    // --- DOM Elements ---
    private pageContentElement: HTMLElement;
    private genericModal: HTMLElement;
    private chatDrawer: HTMLElement;
    private chatMessages: HTMLElement;
    private chatInput: HTMLInputElement;
    private sendButton: HTMLButtonElement;
    private sendIcon: HTMLElement;
    private loadingIndicator: HTMLElement;
    private voiceInputButton: HTMLButtonElement;
    private fileInputHidden: HTMLInputElement;
    private attachedFilesPreview: HTMLElement;
    private greetingElement: HTMLElement;
    private subGreetingElement: HTMLElement;
    private userNameElement: HTMLElement;
    private userAvatarElement: HTMLElement;
    private recognition: any | null = null;
    private isListening: boolean = false;

    constructor() {
        this.pageContentElement = document.getElementById('dashboard-container') as HTMLElement;
        this.genericModal = document.getElementById('generic-modal') as HTMLElement;
        this.chatDrawer = document.getElementById('chat-drawer') as HTMLElement;
        this.chatMessages = document.getElementById('chat-messages') as HTMLElement;
        this.chatInput = document.getElementById('chat-input') as HTMLInputElement;
        this.sendButton = document.getElementById('send-button') as HTMLButtonElement;
        this.sendIcon = document.getElementById('send-icon') as HTMLElement;
        this.loadingIndicator = document.getElementById('loading-indicator') as HTMLElement;
        this.voiceInputButton = document.getElementById('voice-input-button') as HTMLButtonElement;
        this.fileInputHidden = document.getElementById('file-input-hidden') as HTMLInputElement;
        this.attachedFilesPreview = document.getElementById('attached-files-preview') as HTMLElement;
        this.greetingElement = document.querySelector('.greeting') as HTMLElement;
        this.subGreetingElement = document.querySelector('.sub-greeting') as HTMLElement;
        this.userNameElement = document.getElementById('user-name') as HTMLElement;
        this.userAvatarElement = document.getElementById('user-avatar') as HTMLElement;

        this.loadState();
        this.init().catch(console.error); // Hantera async init
    }

    private async init() {
        // Initialize Firebase first
        try {
            console.log('üî• Initializing Firebase...');
            await initializeFirebase();
            console.log('‚úÖ Firebase initialization complete!');
        } catch (error) {
            console.error('‚ùå Firebase initialization failed:', error);
            this.showToast('Firebase-anslutningen misslyckades. Vissa funktioner kan vara begr√§nsade.', 'error');
        }
        
        this.initAuth();
        
        // Setup event listeners FIRST to ensure buttons work even if AI fails
        this.setupEventListeners();
        this.setupSpeechRecognition();
        this.handleCookieConsent();
        this.startPlaceholderAnimation();
        this.checkAuthStatus();
        
        // Initialize AI last, and don't block other functionality if it fails
        this.initAI().catch(error => {
            console.error('‚ùå AI initialization failed, but app continues to work:', error);
        });
    }
    
    private initAuth() {
        // Check for auth callback in URL
        const urlParams = new URLSearchParams(window.location.search);
        const sessionId = urlParams.get('session');
        const authStatus = urlParams.get('auth');
        
        if (sessionId && authStatus === 'success') {
            this.state.googleAuth.sessionId = sessionId;
            this.state.googleAuth.isAuthenticated = true;
            // Clean URL
            window.history.replaceState({}, document.title, window.location.pathname);
            this.fetchUserInfo();
        } else if (authStatus === 'error') {
            this.showToast("Inloggningen misslyckades.", 'error');
            window.history.replaceState({}, document.title, window.location.pathname);
        }
    }
    
    private async checkAuthStatus() {
        if (this.state.googleAuth.sessionId && this.state.googleAuth.isAuthenticated) {
            await this.fetchUserInfo();
        }
    }
    
    private async fetchUserInfo() {
        if (!this.state.googleAuth.sessionId) return;
        
        try {
            const response = await fetch(`${API_BASE_URL}/api/user`, {
                headers: {
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                }
            });
            
            if (response.ok) {
                const userData = await response.json();
                this.state.user = {
                    isLoggedIn: true,
                    name: userData.name,
                    email: userData.email,
                    avatarUrl: userData.picture,
                    id: userData.id
                };
                this.state.onboardingChecklist.connectedGoogle = true;
                this.state.onboarding.completed = true;
                this.showToast(`V√§lkommen, ${userData.name}!`);
                if (this.state.isDemoMode) this.toggleDemoMode(false);
                
                // Skicka personlig v√§lkomsth√§lsning till AI n√§r anv√§ndaren loggar in
                setTimeout(() => {
                    if (this.isAiReady) {
                        this.addMessage(`Hej ${userData.name.split(' ')[0]}! üëã Jag √§r din AI-assistent h√§r p√• ByggPilot. Jag hj√§lper dig med administrativa uppgifter, projekthantering och byggfr√•gor. Vad kan jag hj√§lpa dig med idag?`, 'ai');
                    }
                }, 1000);
            } else {
                // Session expired or invalid
                this.handleSignOut();
            }
        } catch (error) {
            console.error("Error fetching user info:", error);
            this.showToast("Kunde inte h√§mta anv√§ndarinformation.", 'error');
        }
        
        this.saveAndRender();
    }

    private async initAI() {
        try {
            console.log('üîß Initializing secure AI system...');
            
            // Test att v√•r s√§kra Gemini API-funktion fungerar
            const testResponse = await fetch('/.netlify/functions/gemini', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    prompt: 'Test'
                })
            });
            
            if (!testResponse.ok) {
                throw new Error('AI service √§r inte tillg√§nglig fr√•n backend');
            }
            
            const testData = await testResponse.json();
            
            if (!testData.success) {
                throw new Error('AI service returnerade fel: ' + testData.error);
            }
            
            this.isAiReady = true;
            this.addMessage("ByggPilot AI √§r redo att hj√§lpa dig! Skriv dina fr√•gor eller kommandon h√§r.", 'ai');
            console.log("‚úÖ Secure AI system initialized successfully");
            
        } catch (error) {
            console.error("‚ùå Failed to initialize secure AI:", error);
            this.isAiReady = false;
            this.addMessage("ByggPilot AI √§r inte tillg√§nglig just nu. Kontrollera att backend-funktionerna √§r korrekt konfigurerade.", 'ai', true);
        }
    }
    
    private setupEventListeners() {
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keydown', e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendMessage(); }});
        this.voiceInputButton.addEventListener('click', () => this.toggleVoiceInput());
        this.fileInputHidden.addEventListener('change', (e) => this.handleFileAttachment(e));
        this.chatInput.addEventListener('focus', () => {
            if (!this.state.isChatExpanded) {
                this.toggleChat();
            }
        });

        document.body.addEventListener('click', (e) => this.handleCentralClick(e));
    }
    
    private handleCentralClick(e: MouseEvent) {
        const target = e.target as HTMLElement;
        const actionTarget = target.closest<HTMLElement>('[data-action]');
        
        if (!target.closest('.dropdown-menu') && !target.closest('[data-action="show-profile"]')) {
            document.querySelectorAll('.dropdown-menu.show').forEach(menu => menu.classList.remove('show'));
        }

        if (actionTarget) {
            e.preventDefault();
            e.stopPropagation();
            const action = actionTarget.dataset.action;
            const detailsJSON = actionTarget.dataset.details;
            let details: any = detailsJSON ? JSON.parse(detailsJSON) : {};
            
            if (!details.projectId) {
               const card = target.closest<HTMLElement>('.project-card[data-project-id]');
               if(card) details.projectId = card.dataset.projectId;
            }
            
            this.handleAction(action, details, actionTarget);
        }
    }

    private handleAction(action: string | undefined, details: any, target: HTMLElement) {
        if (!action) return;
        switch (action) {
            // Onboarding
            case 'onboarding-set-role': this.handleOnboardingStep('role', details.role); break;
            case 'dismiss-onboarding-checklist': this.state.settings.showOnboardingChecklist = false; this.saveAndRender(); break;

            // Auth
            case 'google-signin': this.handleGoogleSignIn(); break;
            case 'sign-out': this.handleSignOut(); break;

            // UI
            case 'show-profile': document.getElementById('user-profile-menu')?.classList.toggle('show'); break;
            case 'create-new': this.showCreateModal(details.projectId); break;
            case 'close-modal': this.genericModal.classList.remove('active'); break;
            case 'toggle-demo': this.toggleDemoMode(); break;
            case 'start-timer': this.startTimer(); break;
            case 'stop-timer': this.stopTimer(); break;
            case 'show-view': this.switchView(target.dataset.view!); break;
            case 'cookie-accept': this.acceptCookies(target.dataset.choice!); break;
            case 'remove-project': this.removeProject(details.projectId); break;
            case 'interactive-help-cta':
                this.chatInput.value = "Visa mig en snabbdemo av ByggPilot";
                if (!this.state.isChatExpanded) this.toggleChat();
                this.sendMessage();
                break;
            case 'toggle-chat': this.toggleChat(); break;
            case 'toggle-setting': this.toggleSetting(target); break;
            case 'attach-file': this.fileInputHidden.click(); break;
            case 'remove-attached-file': this.removeAttachedFile(details.fileName); break;
            case 'open-project-folder': 
                const project = this.state.projects.find(p => p.id === details.projectId);
                if (project?.googleDriveFolderId && this.state.user.isLoggedIn) {
                    // Visa projektfiler i en modal eller nytt view
                    this.showProjectFiles(details.projectId);
                } else {
                    this.showToast(`Simulerar: √ñppnar mapp f√∂r projekt ${details.projectId}...`); 
                }
                break;
            case 'open-event': this.showToast(`Simulerar: √ñppnar h√§ndelse...`); break;
            case 'open-drive': this.showToast("√ñppnar Google Drive..."); break;
            case 'open-calendar': this.showToast("√ñppnar Google Kalender..."); break;
            case 'open-gmail': this.showToast("√ñppnar Gmail..."); break;
            case 'send-email': this.showEmailModal(details); break;
            case 'show-help-modal': this.showHelpModal(); break;
        }
    }

    // --- AUTHENTICATION ---
    private async handleGoogleSignIn() {
        try {
            const response = await fetch('/.netlify/functions/auth');
            const data = await response.json();
            
            if (data.authUrl) {
                // Redirect to Google OAuth
                window.location.href = data.authUrl;
            } else {
                throw new Error('Failed to get authorization URL');
            }
        } catch (error) {
            console.error("Error during Google Sign-In:", error);
            this.showToast("Inloggningen misslyckades.", 'error');
        }
    }
    
    private async handleSignOut() {
        try {
            if (this.state.googleAuth.sessionId) {
                await fetch(`${API_BASE_URL}/api/logout`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                    }
                });
            }
            
            this.state.user = this.getInitialState().user;
            this.state.googleAuth = this.getInitialState().googleAuth;
            this.showToast("Du har loggats ut.");
            this.switchView('dashboard');
        } catch (error) {
            console.error("Error signing out:", error);
            this.showToast("Utloggningen misslyckades.", 'error');
        }
        this.saveAndRender();
    }

    // --- GOOGLE DRIVE INTEGRATION ---
    private async createProjectFolder(projectName: string): Promise<GoogleDriveFolder | null> {
        if (!this.state.googleAuth.sessionId) {
            this.showToast("Du m√•ste vara inloggad f√∂r att skapa projektmappar.", 'error');
            return null;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/drive/create-folder`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                },
                body: JSON.stringify({ folderName: projectName })
            });

            if (response.ok) {
                const folderData = await response.json();
                this.showToast(`Projektmapp skapad i Google Drive!`);
                return folderData;
            } else {
                throw new Error('Failed to create folder');
            }
        } catch (error) {
            console.error("Error creating project folder:", error);
            this.showToast("Kunde inte skapa projektmapp.", 'error');
            return null;
        }
    }

    private async uploadFileToProject(projectId: string, fileName: string, fileContent: string, mimeType: string): Promise<boolean> {
        const project = this.state.projects.find(p => p.id === projectId);
        if (!project?.googleDriveFolderId) {
            this.showToast("Projektet har ingen kopplad Google Drive-mapp.", 'error');
            return false;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/drive/upload-file`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                },
                body: JSON.stringify({
                    fileName,
                    fileContent,
                    mimeType,
                    folderId: project.googleDriveFolderId
                })
            });

            if (response.ok) {
                this.showToast(`Fil "${fileName}" uppladdad till Google Drive!`);
                return true;
            } else {
                throw new Error('Failed to upload file');
            }
        } catch (error) {
            console.error("Error uploading file:", error);
            this.showToast("Kunde inte ladda upp fil.", 'error');
            return false;
        }
    }

    private async listProjectFiles(projectId: string): Promise<GoogleDriveFile[]> {
        const project = this.state.projects.find(p => p.id === projectId);
        if (!project?.googleDriveFolderId) {
            return [];
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/drive/list-files/${project.googleDriveFolderId}`, {
                headers: {
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                return data.files || [];
            } else {
                throw new Error('Failed to list files');
            }
        } catch (error) {
            console.error("Error listing project files:", error);
            return [];
        }
    }

    // --- GMAIL INTEGRATION ---
    private async sendEmailWithAttachment(to: string, subject: string, body: string, attachments: any[] = []): Promise<boolean> {
        if (!this.state.googleAuth.sessionId) {
            this.showToast("Du m√•ste vara inloggad f√∂r att skicka e-post.", 'error');
            return false;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/gmail/send`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                },
                body: JSON.stringify({ to, subject, body, attachments })
            });

            if (response.ok) {
                this.showToast(`E-post skickat till ${to}!`);
                return true;
            } else {
                throw new Error('Failed to send email');
            }
        } catch (error) {
            console.error("Error sending email:", error);
            this.showToast("Kunde inte skicka e-post.", 'error');
            return false;
        }
    }

    private async checkForNewEmails(query: string = 'is:unread'): Promise<GmailMessage[]> {
        if (!this.state.googleAuth.sessionId) {
            return [];
        }

        try {
            const response = await fetch(`${API_BASE_URL}/api/gmail/messages?query=${encodeURIComponent(query)}`, {
                headers: {
                    'Authorization': `Bearer ${this.state.googleAuth.sessionId}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                return data.messages || [];
            } else {
                throw new Error('Failed to fetch emails');
            }
        } catch (error) {
            console.error("Error checking emails:", error);
            return [];
        }
    }

    // --- STATE MANAGEMENT ---
    private saveState() {
        const stateToSave = {
            settings: this.state.settings,
            isDemoMode: this.state.isDemoMode,
            projects: this.state.isDemoMode ? this.state.projects : [],
            tasks: this.state.isDemoMode ? this.state.tasks : [],
            events: this.state.isDemoMode ? this.state.events : [],
            onboarding: this.state.onboarding,
            onboardingChecklist: this.state.onboardingChecklist,
            googleAuth: this.state.googleAuth
        }
        localStorage.setItem(`byggpilot_state_v2`, JSON.stringify(stateToSave));
    }

    private getInitialState(): AppState {
        return {
            user: { isLoggedIn: false, name: 'G√§stanv√§ndare', avatarUrl: null, id: null, email: null },
            projects: [],
            tasks: [],
            events: [],
            attachedFiles: [],
            activeTimer: { projectId: null, startTime: null, intervalId: null },
            isDemoMode: false,
            settings: { showTimeLogger: true, showTaskList: true, showEvents: true, showOnboardingChecklist: true },
            currentView: 'dashboard',
            isChatExpanded: false,
            onboarding: { completed: false, step: 'welcome', role: null },
            onboardingChecklist: { createdProject: false, connectedGoogle: false, loggedTime: false },
            googleAuth: { sessionId: null, isAuthenticated: false }
        };
    }

    private loadState() {
        const savedStateJSON = localStorage.getItem(`byggpilot_state_v2`);
        this.state = this.getInitialState();

        if (savedStateJSON) {
             try {
                const loadedState = JSON.parse(savedStateJSON);
                this.state.settings = { ...this.getInitialState().settings, ...loadedState.settings };
                this.state.onboarding = loadedState.onboarding || this.getInitialState().onboarding;
                this.state.onboardingChecklist = loadedState.onboardingChecklist || this.getInitialState().onboardingChecklist;
                this.state.googleAuth = loadedState.googleAuth || this.getInitialState().googleAuth;

                if (loadedState.isDemoMode) {
                    this.state.isDemoMode = true;
                    this.state.projects = loadedState.projects || [];
                    this.state.tasks = loadedState.tasks || [];
                    this.state.events = loadedState.events || [];
                }
            } catch (e) {
                console.error("Could not parse saved state:", e);
                localStorage.removeItem('byggpilot_state_v2');
            }
        }
    }

    private saveAndRender() {
        this.saveState();
        this.renderCurrentView();
    }
    
    private toggleDemoMode(forceState?: boolean) {
        this.state.isDemoMode = forceState !== undefined ? forceState : !this.state.isDemoMode;

        if (this.state.isDemoMode) {
            this.state.onboarding.completed = true; // Skip onboarding for demo
            this.state.projects = [
                {id: 'proj-1', name: "Badrumsrenovering Villa Ekbacken", customer: "Familjen Andersson", deadline: "2024-08-15", progress: 75, status: 'green'},
                {id: 'proj-2', name: "Altanbygge Sommarstugan", customer: "Sven Svensson", deadline: "2024-07-30", progress: 40, status: 'yellow'},
                {id: 'proj-3', name: "F√∂nsterbyte BRF Utsikten", customer: "BRF Utsikten", deadline: "2024-07-20", progress: 90, status: 'red'},
            ];
            this.state.tasks = [
                {id: 'task-1', text: "Best√§lla kakel till Villa Ekbacken", completed: false},
                {id: 'task-2', text: "Skicka offert till ny kund", completed: false},
                {id: 'task-3', text: "Fakturera BRF Utsikten f√∂r etapp 3", completed: true},
            ];
            this.state.events = [
                { id: 'evt-1', type: 'mail', icon: 'mail', title: 'Nytt mail fr√•n Anna Andersson', subtitle: 'Ang. offert badrum...', link: '#' },
                { id: 'evt-2', type: 'calendar', icon: 'calendar_month', title: 'Slutbesiktning Villa Nygren', subtitle: 'Imorgon kl 14:00', link: '#' },
                { id: 'evt-3', type: 'file', icon: 'description', title: 'Nytt avtal fr√•n leverant√∂r', subtitle: 'Tr√§varu AB', link: '#' },
            ];
            this.showToast('Demol√§ge aktiverat!');
        } else {
            // Don't clear state if a user is logging in, just turn off demo mode
            if (!this.state.user.isLoggedIn) {
                this.state.projects = [];
                this.state.tasks = [];
                this.state.events = [];
            }
            this.showToast('Demol√§ge avaktiverat.');
        }

        document.body.classList.toggle('demo-mode-active', this.state.isDemoMode);
        this.saveAndRender();
    }

    // --- RENDERING ---
    private switchView(viewId: string) {
        if(viewId === 'projects') viewId = 'dashboard'; // Reroute projects to dashboard for now

        this.state.currentView = viewId;
        document.querySelectorAll('.sidebar-nav a, .sidebar-footer a').forEach(link => {
            link.classList.toggle('active', link.getAttribute('data-view') === viewId || (viewId === 'dashboard' && link.getAttribute('data-view') === 'projects'));
        });
        this.saveAndRender();
    }

    private renderCurrentView() {
        this.renderHeaderAndSidebar();
        this.renderChatState();

        const showOnboarding = !this.state.onboarding.completed && !this.state.user.isLoggedIn && !this.state.isDemoMode;

        if (showOnboarding) {
            this.renderOnboarding();
            return;
        }

        const canAccessContent = this.state.user.isLoggedIn || this.state.isDemoMode;
        
        switch (this.state.currentView) {
            case 'dashboard':
                canAccessContent ? this.renderLoggedInDashboard() : this.renderLoggedOutDashboard();
                break;
            case 'help':
                this.renderHelpView(); // Same for both logged in and out
                break;
            case 'settings':
                 canAccessContent ? this.renderSettingsView() : this.renderPlaceholderView('Inst√§llningar');
                 break;
            case 'dokument':
                 canAccessContent ? this.renderDokumentView() : this.renderPlaceholderView('Dokument');
                 break;
            case 'slutfaktura':
                 canAccessContent ? this.renderInvoiceView() : this.renderPlaceholderView('Slutfaktura');
                 break;
            default:
                canAccessContent ? this.renderGenericView(this.state.currentView) : this.renderPlaceholderView(this.state.currentView);
        }
    }

    private renderHeaderAndSidebar() {
        const { isLoggedIn, name, avatarUrl } = this.state.user;
        const isDemo = this.state.isDemoMode;

        (document.getElementById('google-signin-button') as HTMLElement).style.display = isLoggedIn ? 'none' : 'flex';
        (document.getElementById('demo-mode-button') as HTMLElement).style.display = isLoggedIn ? 'none' : 'block';
        (document.getElementById('logout-button') as HTMLElement).style.display = isLoggedIn ? 'flex' : 'none';
        (document.getElementById('logout-divider') as HTMLElement).style.display = isLoggedIn ? 'block' : 'none';
        
        // D√∂lj "Skapa Nytt"-knappen f√∂r utloggade anv√§ndare (utom i demol√§ge)
        (document.getElementById('create-new-button') as HTMLElement).style.display = (isLoggedIn || isDemo) ? 'flex' : 'none';
        
        if (isLoggedIn && name) {
            this.userNameElement.textContent = name;
            this.userAvatarElement.innerHTML = avatarUrl ? `<img src="${avatarUrl}" alt="Anv√§ndarprofilbild">` : `<span>${name.charAt(0).toUpperCase()}</span>`;
            this.greetingElement.textContent = `God morgon, ${name.split(' ')[0]}!`;
            this.subGreetingElement.textContent = "H√§r √§r din √∂versikt f√∂r dagen.";
        } else if (isDemo) {
            this.userNameElement.textContent = "Demo Anv√§ndare";
            this.userAvatarElement.innerHTML = `<span>D</span>`;
            this.greetingElement.textContent = "V√§lkommen till demol√§get";
            this.subGreetingElement.textContent = "Klicka runt och utforska funktionerna.";
        } else {
            this.userNameElement.textContent = "G√§st";
            this.userAvatarElement.innerHTML = `<span>G</span>`;
            this.greetingElement.textContent = "V√§lkommen till ByggPilot";
            this.subGreetingElement.textContent = "Logga in eller testa demol√§get.";
        }
    }

    private renderLoggedInDashboard() {
        const template = document.getElementById('logged-in-dashboard-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));
        
        if (this.state.settings.showOnboardingChecklist && this.state.onboarding.completed) {
            this.renderOnboardingChecklist();
        }

        // Render widgets based on settings
        const timeLoggerWidget = document.getElementById('time-logger-widget');
        if (timeLoggerWidget) timeLoggerWidget.style.display = this.state.settings.showTimeLogger ? 'flex' : 'none';
        const taskListWidget = document.getElementById('task-list-widget');
        if (taskListWidget) taskListWidget.style.display = this.state.settings.showTaskList ? 'flex' : 'none';
        const eventsWidget = document.getElementById('events-widget');
        if (eventsWidget) eventsWidget.style.display = this.state.settings.showEvents ? 'flex' : 'none';

        this.renderProjectOverviewWidget();
        this.renderTaskWidget();
        this.renderTimeLoggerWidget();
        this.renderEventsWidget();
    }
    
    private renderLoggedOutDashboard() {
        const template = document.getElementById('logged-out-dashboard-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));
    }
    
    private renderDokumentView() {
        const template = document.getElementById('dokument-view-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));
    }

    private renderPlaceholderView(viewName: string) {
        const template = document.getElementById('placeholder-view-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        const clone = template.content.cloneNode(true) as DocumentFragment;
        (clone.querySelector('.view-title') as HTMLElement).textContent = viewName.charAt(0).toUpperCase() + viewName.slice(1);
        this.pageContentElement.appendChild(clone);
    }

    private renderGenericView(viewName: string) {
        this.pageContentElement.innerHTML = `<div class="empty-state"><h1>${viewName.charAt(0).toUpperCase() + viewName.slice(1)}</h1><p>Denna vy √§r under utveckling.</p></div>`;
    }
    
    private renderHelpView() {
        const template = document.getElementById('help-landing-page-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));
    }

    private renderInvoiceView() {
        const template = document.getElementById('slutfaktura-view-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));
        
        const select = document.getElementById('invoice-project-select') as HTMLSelectElement;
        select.innerHTML = '<option value="">V√§lj ett projekt</option>';
        this.state.projects.forEach(p => {
            const option = document.createElement('option');
            option.value = p.id;
            option.textContent = p.name;
            select.appendChild(option);
        });
    }

    private renderSettingsView() {
        const template = document.getElementById('settings-view-template') as HTMLTemplateElement;
        this.pageContentElement.innerHTML = '';
        this.pageContentElement.appendChild(template.content.cloneNode(true));

        (document.getElementById('toggle-timelogger') as HTMLInputElement).checked = this.state.settings.showTimeLogger;
        (document.getElementById('toggle-tasklist') as HTMLInputElement).checked = this.state.settings.showTaskList;
        (document.getElementById('toggle-events') as HTMLInputElement).checked = this.state.settings.showEvents;

        this.renderProjectManagementList();
    }

    private toggleSetting(target: HTMLElement) { // target is the div.switch
        const input = target.querySelector('input');
        if (!input) return;
        const setting = input.dataset.setting as keyof AppState['settings'];
        if (setting) {
            (this.state.settings as any)[setting] = !(this.state.settings as any)[setting];
            this.saveAndRender();
        }
    }
    
    private renderProjectManagementList() {
        const list = document.getElementById('project-management-list');
        const template = document.getElementById('project-management-item-template') as HTMLTemplateElement;
        if (!list || !template) return;
        
        list.innerHTML = '';
        this.state.projects.forEach(project => {
            const clone = template.content.cloneNode(true) as DocumentFragment;
            (clone.querySelector('.item-name') as HTMLElement).textContent = project.name;
            const button = clone.querySelector('button') as HTMLButtonElement;
            button.dataset.details = JSON.stringify({ projectId: project.id });
            list.appendChild(clone);
        });
    }

    private removeProject(projectId: string) {
        this.state.projects = this.state.projects.filter(p => p.id !== projectId);
        this.showToast("Projektet har tagits bort.");
        this.saveAndRender();
    }

    // --- WIDGET RENDERING ---
    private renderProjectOverviewWidget() {
        const container = document.getElementById('project-grid-container');
        if (!container) return;
        const cardTemplate = document.getElementById('project-card-template') as HTMLTemplateElement;
        const actionsTemplate = document.getElementById('project-card-actions-template') as HTMLTemplateElement;
        container.innerHTML = '';

        if (this.state.projects.length === 0) {
            container.innerHTML = `<div class="empty-state">Inga projekt att visa. Skapa ett nytt!</div>`;
            return;
        }

        this.state.projects.forEach(project => {
            const cardClone = cardTemplate.content.cloneNode(true) as DocumentFragment;
            const cardEl = cardClone.firstElementChild as HTMLElement;
            cardEl.dataset.projectId = project.id;
            cardEl.dataset.details = JSON.stringify({ projectId: project.id });
            cardEl.style.borderLeftColor = `var(--status-${project.status})`;
            
            cardEl.querySelector('.project-name')!.textContent = project.name;
            cardEl.querySelector('.customer-name')!.textContent = project.customer;
            cardEl.querySelector('.deadline-date')!.textContent = project.deadline;
            cardEl.querySelector('.progress-percentage')!.textContent = `${project.progress}%`;
            (cardEl.querySelector('.progress-bar-inner') as HTMLElement)!.style.width = `${project.progress}%`;
            
            const statusTag = cardEl.querySelector('.status-tag') as HTMLElement;
            statusTag.className = 'status-tag';
            statusTag.classList.add(`status-${project.status}`);
            statusTag.textContent = { green: 'I fas', yellow: 'Risk', red: 'F√∂rsenat' }[project.status];

            // Add contextual actions
            const actionsClone = actionsTemplate.content.cloneNode(true) as DocumentFragment;
            cardEl.prepend(actionsClone);

            container.appendChild(cardClone);
        });
    }

    private renderTaskWidget() {
        const container = document.getElementById('task-list');
        if (!container) return;
        const template = document.getElementById('task-item-template') as HTMLTemplateElement;
        container.innerHTML = '';
        if (this.state.tasks.length === 0) {
            container.innerHTML = `<li class="empty-state">Inga uppgifter.</li>`;
            return;
        }
        this.state.tasks.forEach(task => {
            const clone = template.content.cloneNode(true) as DocumentFragment;
            const li = clone.firstElementChild as HTMLElement;
            const input = li.querySelector('input') as HTMLInputElement;
            const label = li.querySelector('label') as HTMLLabelElement;
            const uniqueId = `task-${task.id}`;

            input.id = uniqueId;
            input.checked = task.completed;
            input.onchange = () => this.handleTaskToggle(task.id, input.checked);
            label.setAttribute('for', uniqueId);
            label.textContent = task.text;
            container.appendChild(li);
        });
    }

    private renderEventsWidget() {
        const container = document.getElementById('event-list');
        if (!container) return;
        const template = document.getElementById('event-item-template') as HTMLTemplateElement;
        container.innerHTML = '';
        if (this.state.events.length === 0) {
             container.innerHTML = `<li class="empty-state">Inga nya h√§ndelser.</li>`;
            return;
        }
        this.state.events.forEach(event => {
            const clone = template.content.cloneNode(true) as DocumentFragment;
            const li = clone.firstElementChild as HTMLElement;
            li.dataset.details = JSON.stringify({ eventId: event.id, link: event.link });
            (li.querySelector('.material-symbols-outlined') as HTMLElement).textContent = event.icon;
            (li.querySelector('.event-title') as HTMLElement).textContent = event.title;
            (li.querySelector('.event-subtitle') as HTMLElement).textContent = event.subtitle;
            container.appendChild(clone);
        });
    }


    private handleTaskToggle(taskId: string, isCompleted: boolean) {
        const task = this.state.tasks.find(t => t.id === taskId);
        if (task) {
            task.completed = isCompleted;
            this.saveState(); // Just save, no need to re-render the whole view
        }
    }
    
    private renderTimeLoggerWidget() {
        const projectSelect = document.getElementById('project-select') as HTMLSelectElement;
        if (!projectSelect) return;
        projectSelect.innerHTML = '<option value="">V√§lj projekt...</option>';
        this.state.projects.forEach(p => {
            const option = document.createElement('option');
            option.value = p.id;
            option.textContent = p.name;
            projectSelect.appendChild(option);
        });
    }

    // --- ONBOARDING ---

    private renderOnboarding() {
        this.pageContentElement.innerHTML = ''; // Clear main page
        this.genericModal.innerHTML = ''; // Clear modal
        
        let templateId;
        switch(this.state.onboarding.step) {
            case 'welcome':
                templateId = 'onboarding-welcome-modal-template';
                break;
            case 'create_project':
                templateId = 'onboarding-create-project-template';
                break;
            default:
                this.state.onboarding.completed = true;
                this.saveAndRender();
                return;
        }

        const template = document.getElementById(templateId) as HTMLTemplateElement;
        this.genericModal.appendChild(template.content.cloneNode(true));

        if (this.state.onboarding.step === 'create_project') {
            const form = this.genericModal.querySelector('#onboarding-project-form') as HTMLFormElement;
            form.onsubmit = (e) => {
                e.preventDefault();
                const projectName = (this.genericModal.querySelector('#onboarding-project-name') as HTMLInputElement).value;
                const customerName = (this.genericModal.querySelector('#onboarding-customer-name') as HTMLInputElement).value;
                this.handleOnboardingStep('create_project', { projectName, customerName });
            };
        }

        this.genericModal.classList.add('active');
    }

    private handleOnboardingStep(step: 'role' | 'create_project', data: any) {
        if (step === 'role') {
            this.state.onboarding.role = data;
            this.state.onboarding.step = 'create_project';
            this.saveState();
            this.renderOnboarding(); // Re-render to show next step
        } else if (step === 'create_project') {
            const projectData: Project = {
                id: `proj-${Date.now()}`,
                name: data.projectName,
                customer: data.customerName,
                deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                progress: 0,
                status: 'green'
            };
            this.state.projects.unshift(projectData);
            this.state.onboarding.completed = true;
            this.state.onboardingChecklist.createdProject = true;
            this.showToast(`Projektet '${projectData.name}' har skapats!`);
            
            this.genericModal.classList.remove('active');
            this.saveAndRender();
            
            // Introduce AI
            setTimeout(() => {
                this.chatInput.value = `Skapa en checklista f√∂r m√•lningsarbete f√∂r projektet ${data.projectName}`;
                if(!this.state.isChatExpanded) this.toggleChat();
                this.showToast("H√§r √§r din AI-assistent. Prova att skicka det f√∂reslagna kommandot!", "info");
            }, 500);
        }
    }
    
    private renderOnboardingChecklist() {
        const container = document.getElementById('onboarding-checklist-container');
        if (!container || !this.state.settings.showOnboardingChecklist) return;

        const template = document.getElementById('onboarding-checklist-template') as HTMLTemplateElement;
        container.innerHTML = '';
        container.appendChild(template.content.cloneNode(true));
        
        const list = document.getElementById('onboarding-task-list') as HTMLElement;
        const taskTemplate = document.getElementById('task-item-template') as HTMLTemplateElement;

        const checklistItems = [
            { text: "Skapa ditt f√∂rsta projekt", completed: this.state.onboardingChecklist.createdProject, id: "ob-1" },
            { text: "Koppla ditt Google-konto f√∂r automatisering", completed: this.state.onboardingChecklist.connectedGoogle, id: "ob-2" },
            { text: "Logga din f√∂rsta timme", completed: this.state.onboardingChecklist.loggedTime, id: "ob-3" }
        ];

        list.innerHTML = '';
        checklistItems.forEach(item => {
            const clone = taskTemplate.content.cloneNode(true) as DocumentFragment;
            const li = clone.firstElementChild as HTMLElement;
            const input = li.querySelector('input') as HTMLInputElement;
            const label = li.querySelector('label') as HTMLLabelElement;
            input.id = item.id;
            input.checked = item.completed;
            input.disabled = true; // Non-interactive
            label.setAttribute('for', item.id);
            label.textContent = item.text;
            list.appendChild(li);
        });
    }


    // --- MODALS & NOTIFICATIONS ---
    private showCreateModal(editProjectId?: string) {
        const template = document.getElementById('create-project-modal-template') as HTMLTemplateElement;
        if (!template) return;

        this.genericModal.innerHTML = '';
        this.genericModal.appendChild(template.content.cloneNode(true));
        const form = this.genericModal.querySelector('#project-form') as HTMLFormElement;
        
        if(editProjectId) { /* ... edit logic ... */ }

        form.onsubmit = async (e) => {
            e.preventDefault();
            const id = (form.elements.namedItem('project-id-input') as HTMLInputElement).value || `proj-${Date.now()}`;
            const name = (form.elements.namedItem('project-name-input') as HTMLInputElement).value;
            const customer = (form.elements.namedItem('project-customer-input') as HTMLInputElement).value;
            const deadline = (form.elements.namedItem('project-deadline-date-input') as HTMLInputElement).value;
            const progress = parseInt((form.elements.namedItem('project-progress-input') as HTMLInputElement).value, 10);
            let status: Project['status'] = progress > 85 ? 'red' : progress > 60 ? 'yellow' : 'green';
            
            let projectData: Project = { id, name, customer, deadline, progress, status };

            // Skapa Google Drive-mapp om anv√§ndaren √§r inloggad
            if (!editProjectId && this.state.user.isLoggedIn && this.state.googleAuth.sessionId) {
                this.showToast("Skapar projektmapp i Google Drive...", 'info');
                const folderData = await this.createProjectFolder(name);
                if (folderData) {
                    projectData.googleDriveFolderId = folderData.folderId;
                }
            }

            if (editProjectId) {
                this.state.projects = this.state.projects.map(p => p.id === editProjectId ? projectData : p);
                this.showToast(`Projektet '${projectData.name}' har uppdaterats.`);
            } else {
                this.state.projects.unshift(projectData);
                this.state.onboardingChecklist.createdProject = true;
                this.showToast(`Projektet '${projectData.name}' har skapats.`);
            }
            this.saveAndRender();
            this.genericModal.classList.remove('active');
        };
        this.genericModal.classList.add('active');
    }

    private async showProjectFiles(projectId: string) {
        const project = this.state.projects.find(p => p.id === projectId);
        if (!project || !project.googleDriveFolderId) {
            this.showToast("Projektet har ingen kopplad Google Drive-mapp.", 'error');
            return;
        }

        this.showToast("H√§mtar projektfiler...", 'info');
        const files = await this.listProjectFiles(projectId);

        this.genericModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Projektfiler - ${project.name}</h2>
                    <button class="btn" data-action="close-modal">
                        <span class="material-symbols-outlined">close</span>
                    </button>
                </div>
                <div class="modal-body">
                    ${files.length === 0 ? 
                        '<p>Inga filer hittades i projektmappen.</p>' :
                        files.map(file => `
                            <div class="file-item">
                                <span class="material-symbols-outlined">${getFileIcon(file.mimeType)}</span>
                                <div class="file-info">
                                    <strong>${file.name}</strong>
                                    <small>√Ñndrad: ${new Date(file.modifiedTime).toLocaleDateString('sv-SE')}</small>
                                </div>
                                <a href="${file.webViewLink}" target="_blank" class="btn btn-primary">
                                    <span class="material-symbols-outlined">open_in_new</span>
                                    √ñppna
                                </a>
                            </div>
                        `).join('')
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn" data-action="close-modal">St√§ng</button>
                </div>
            </div>
        `;
        this.genericModal.classList.add('active');

        function getFileIcon(mimeType: string): string {
            if (mimeType.includes('pdf')) return 'picture_as_pdf';
            if (mimeType.includes('image')) return 'image';
            if (mimeType.includes('document') || mimeType.includes('word')) return 'description';
            if (mimeType.includes('sheet') || mimeType.includes('excel')) return 'table_chart';
            if (mimeType.includes('folder')) return 'folder';
            return 'insert_drive_file';
        }
    }

    private showEmailModal(details: any) {
        this.genericModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2>Skicka E-post</h2>
                    <button class="btn" data-action="close-modal">
                        <span class="material-symbols-outlined">close</span>
                    </button>
                </div>
                <form id="email-form">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="email-to">Till:</label>
                            <input type="email" id="email-to" name="to" required value="${details.to || ''}">
                        </div>
                        <div class="form-group">
                            <label for="email-subject">√Ñmne:</label>
                            <input type="text" id="email-subject" name="subject" required value="${details.subject || ''}">
                        </div>
                        <div class="form-group">
                            <label for="email-body">Meddelande:</label>
                            <textarea id="email-body" name="body" rows="8" required>${details.body || ''}</textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" data-action="close-modal">Avbryt</button>
                        <button type="submit" class="btn btn-primary">
                            <span class="material-symbols-outlined">send</span>
                            Skicka
                        </button>
                    </div>
                </form>
            </div>
        `;

        const form = this.genericModal.querySelector('#email-form') as HTMLFormElement;
        form.onsubmit = async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const to = formData.get('to') as string;
            const subject = formData.get('subject') as string;
            const body = formData.get('body') as string;

            const success = await this.sendEmailWithAttachment(to, subject, body);
            if (success) {
                this.genericModal.classList.remove('active');
            }
        };

        this.genericModal.classList.add('active');
    }

    private showHelpModal() {
        this.genericModal.innerHTML = `
            <div class="modal-content help-modal">
                <div class="modal-header">
                    <h2>S√• funkar ByggPilot</h2>
                    <button class="btn" data-action="close-modal">
                        <span class="material-symbols-outlined">close</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="content-section">
                        <p>Vi vet att administration √§r n√∂dv√§ndigt, men det ska inte beh√∂va stj√§la dina kv√§llar eller ta fokus fr√•n det du g√∂r b√§st ‚Äì att driva dina projekt fram√•t.</p>
                        
                        <div class="vision-text">
                            T√§nk om man kunde skapa en digital kollega som alltid finns tillg√§nglig, direkt i fickan?
                        </div>
                    </div>

                    <div class="content-section">
                        <h3>S√• h√§r anv√§nder du ByggPilot:</h3>
                        
                        <div class="example-card">
                            <h4>Ist√§llet f√∂r att:</h4>
                            <p>"Jag m√•ste skapa en mapp f√∂r det nya projektet, sedan skriva en offert, komma ih√•g att f√∂lja upp..."</p>
                            <h4>S√§g s√• h√§r:</h4>
                            <p>"Skapa ett nytt projekt f√∂r Villa Andersson p√• Storgatan 15"</p>
                        </div>

                        <div class="example-card">
                            <h4>Ist√§llet f√∂r att:</h4>
                            <p>"Var ska jag l√§gga alla kvitton? Vilka handlingar beh√∂ver revisorn?"</p>
                            <h4>S√§g s√• h√§r:</h4>
                            <p>"Hj√§lp mig organisera mina kvitton f√∂r december"</p>
                        </div>

                        <div class="example-card">
                            <h4>Ist√§llet f√∂r att:</h4>
                            <p>"Jag m√•ste kolla v√§derprognosen f√∂r n√§sta vecka och planera om..."</p>
                            <h4>S√§g s√• h√§r:</h4>
                            <p>"Kommer det regna p√• onsdag? Ska vi flytta betonggjutningen?"</p>
                        </div>
                    </div>

                    <div class="content-section">
                        <h3>Vad ByggPilot kan hj√§lpa dig med:</h3>
                        <div class="feature-highlight">
                            <ul>
                                <li><strong>Projekthantering:</strong> Skapa mappar, hantera deadlines, f√∂lj upp framsteg</li>
                                <li><strong>Ekonomi:</strong> Offerter, fakturor, bokf√∂ringsunderlag</li>
                                <li><strong>Kommunikation:</strong> E-post till kunder, uppf√∂ljning, p√•minnelser</li>
                                <li><strong>Dokumentation:</strong> Organisera filer, bilder, ritningar</li>
                                <li><strong>Planering:</strong> V√§derprognos, schemal√§ggning, riskanalys</li>
                            </ul>
                        </div>
                    </div>

                    <div class="content-section">
                        <h3>Tips f√∂r b√§sta resultat:</h3>
                        <p>Var konkret i dina fr√•gor och kommandon. ByggPilot f√∂rst√•r svenska byggtermer och kan hantera allt fr√•n "Skapa KMA-plan" till "Vad kostar det att bygga en altan?"</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" data-action="close-modal">F√∂rst√•tt!</button>
                </div>
            </div>
        `;
        this.genericModal.classList.add('active');
    }

    private showToast(message: string, type: 'info' | 'error' = 'info') {
        const container = document.getElementById('toast-container');
        if (!container) return;
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        container.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
    }
    
    private handleCookieConsent() {
        const consent = localStorage.getItem('byggpilot_cookie_consent');
        const banner = document.getElementById('cookie-consent-banner');
        if (!consent && banner) {
            banner.classList.add('show');
        }
    }

    private acceptCookies(choice: string) {
        localStorage.setItem('byggpilot_cookie_consent', choice);
        const banner = document.getElementById('cookie-consent-banner');
        if (banner) banner.classList.remove('show');
        this.showToast('Tack! Dina cookie-inst√§llningar har sparats.');
    }
    
    // --- TIMER LOGIC ---
    private startTimer() {
        const projectSelect = document.getElementById('project-select') as HTMLSelectElement;
        const timerToggleButton = document.getElementById('timer-toggle-button') as HTMLButtonElement;
        const timerDisplay = document.getElementById('timer-display') as HTMLElement;
        if (!projectSelect || !timerToggleButton || !timerDisplay) return;
        
        const projectId = projectSelect.value;
        if (!projectId) {
            this.showToast("V√§lj ett projekt innan du startar timern.");
            return;
        }
        if (this.state.activeTimer.intervalId) return;

        this.state.activeTimer = {
            projectId,
            startTime: Date.now(),
            intervalId: window.setInterval(() => this.updateTimerDisplay(), 1000)
        };
        timerToggleButton.textContent = 'Stoppa';
        timerToggleButton.dataset.action = 'stop-timer';
        projectSelect.disabled = true;
    }

    private stopTimer() {
        const projectSelect = document.getElementById('project-select') as HTMLSelectElement;
        const timerToggleButton = document.getElementById('timer-toggle-button') as HTMLButtonElement;
        const timerDisplay = document.getElementById('timer-display') as HTMLElement;
        if (!this.state.activeTimer.intervalId || !timerToggleButton || !projectSelect || !timerDisplay) return;

        clearInterval(this.state.activeTimer.intervalId);
        this.showToast(`Tid loggad f√∂r projektet!`);
        this.state.onboardingChecklist.loggedTime = true;
        this.state.activeTimer = { projectId: null, startTime: null, intervalId: null };
        timerDisplay.textContent = "00:00:00";
        timerToggleButton.textContent = 'Starta';
        timerToggleButton.dataset.action = 'start-timer';
        projectSelect.disabled = false;
        this.saveAndRender();
    }

    private updateTimerDisplay() {
        const timerDisplay = document.getElementById('timer-display') as HTMLElement;
        if (!this.state.activeTimer.startTime || !timerDisplay) return;
        const elapsed = Math.floor((Date.now() - this.state.activeTimer.startTime) / 1000);
        const hours = String(Math.floor(elapsed / 3600)).padStart(2, '0');
        const minutes = String(Math.floor((elapsed % 3600) / 60)).padStart(2, '0');
        const seconds = String(elapsed % 60).padStart(2, '0');
        timerDisplay.textContent = `${hours}:${minutes}:${seconds}`;
    }

    // --- SPEECH RECOGNITION ---
    private setupSpeechRecognition() {
        const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
        if (!SpeechRecognition) return;

        this.recognition = new SpeechRecognition();
        this.recognition.continuous = false;
        this.recognition.lang = 'sv-SE';
        this.recognition.interimResults = false;
        this.recognition.onresult = (event: any) => this.chatInput.value = event.results[0][0].transcript;
        this.recognition.onaudiostart = () => { this.isListening = true; this.voiceInputButton.classList.add('is-listening'); };
        this.recognition.onaudioend = () => { this.isListening = false; this.voiceInputButton.classList.remove('is-listening'); };
        this.recognition.onerror = (event: any) => { if (event.error === 'not-allowed') this.showToast("Ge webbl√§saren √•tkomst till mikrofonen.", 'error'); };
    }
    
    private toggleVoiceInput() {
        if (!this.recognition) return;
        this.isListening ? this.recognition.stop() : this.recognition.start();
    }

    // --- CHAT METHODS ---
    private placeholderTexts = [
      "Skapa en KMA-plan f√∂r Villa Nygren...",
      "Vad s√§ger ABT 06 om vite?",
      "Ge mig en checklista f√∂r t√§tskikt i badrum...",
      "Sammanst√§ll alla foton fr√•n projektet Altanbygge."
    ];

    private startPlaceholderAnimation() {
        if (this.placeholderInterval) clearInterval(this.placeholderInterval);
        let currentTextIndex = 0;
        let charIndex = 0;
        
        this.placeholderInterval = window.setInterval(() => {
            const targetText = this.placeholderTexts[currentTextIndex];
            this.chatInput.placeholder = targetText.substring(0, charIndex + 1);
            charIndex++;
            
            if (charIndex > targetText.length + 3) { // Pause after writing
                charIndex = 0;
                currentTextIndex = (currentTextIndex + 1) % this.placeholderTexts.length;
            }
        }, 120);
    }

    private stopPlaceholderAnimation() {
        if (this.placeholderInterval) clearInterval(this.placeholderInterval);
        this.placeholderInterval = null;
        this.chatInput.placeholder = "Fr√•ga din digitala kollega...";
    }

     private toggleChat() {
        this.state.isChatExpanded = !this.state.isChatExpanded;
        if (this.state.isChatExpanded) {
            this.stopPlaceholderAnimation();
            this.chatInput.focus();
        } else {
            this.startPlaceholderAnimation();
        }
        this.renderChatState();
    }
    
    private renderChatState() {
        this.chatDrawer.classList.toggle('expanded', this.state.isChatExpanded);
        this.pageContentElement.classList.toggle('hidden-by-chat', this.state.isChatExpanded);
    }

    private handleFileAttachment(event: Event) {
        const target = event.target as HTMLInputElement;
        if (target.files) {
            this.state.attachedFiles.push(...Array.from(target.files));
            this.renderAttachedFiles();
        }
    }
    
    private removeAttachedFile(fileName: string) {
        this.state.attachedFiles = this.state.attachedFiles.filter(f => f.name !== fileName);
        this.renderAttachedFiles();
    }
    
    private renderAttachedFiles() {
        this.attachedFilesPreview.innerHTML = '';
        this.state.attachedFiles.forEach(file => {
            const item = document.createElement('div');
            item.className = 'file-preview-item';
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-file-btn';
            removeBtn.innerHTML = '&times;';
            removeBtn.dataset.action = 'remove-attached-file';
            removeBtn.dataset.details = JSON.stringify({ fileName: file.name });
            item.appendChild(img);
            item.appendChild(removeBtn);
            this.attachedFilesPreview.appendChild(item);
        });
        if (this.state.attachedFiles.length > 0 && !this.state.isChatExpanded) {
            this.toggleChat();
        }
    }

    private addMessage(text: string, sender: 'user' | 'ai', isError = false) {
        const welcomeMessage = this.chatMessages.querySelector('.welcome-message');
        if (welcomeMessage) welcomeMessage.remove();
        
        const messageElement = document.createElement('div');
        messageElement.classList.add('chat-message', sender);
        if (isError) messageElement.classList.add('error-message');
        
        if (sender === 'ai') {
            const processedContent = this.processAIContent(parseMarkdown(text));
            messageElement.innerHTML = processedContent;
        } else {
            messageElement.innerHTML = `<p>${text.replace(/</g, "&lt;").replace(/>/g, "&gt;")}</p>`;
        }
        
        // L√§gg till kopieringsknapp f√∂r varje meddelande enligt specifikation
        const copyBtn = document.createElement('button');
        copyBtn.className = 'copy-message-btn';
        copyBtn.innerHTML = '<span class="material-symbols-outlined">content_copy</span>';
        copyBtn.title = 'Kopiera meddelande';
        copyBtn.onclick = () => this.copyToClipboard(text);
        messageElement.appendChild(copyBtn);
        
        this.chatMessages.appendChild(messageElement);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    private processAIContent(html: string): string {
        // Identifiera inneh√•ll som ska vara i inramade boxar (checklistor, riskanalyser, etc.)
        const patterns = [
            /(<ul>[\s\S]*?<\/ul>)/g,  // Listor
            /(<ol>[\s\S]*?<\/ol>)/g,  // Numrerade listor
            /(<pre><code>[\s\S]*?<\/code><\/pre>)/g,  // Kodblock
        ];
        
        let processedHtml = html;
        
        patterns.forEach(pattern => {
            processedHtml = processedHtml.replace(pattern, (match) => {
                const boxId = 'box-' + Math.random().toString(36).substr(2, 9);
                return `<div class="ai-content-box" data-content="${boxId}">
                    <button class="copy-content-btn" onclick="window.byggpilot.copyContentBox('${boxId}')" title="Kopiera inneh√•ll">
                        <span class="material-symbols-outlined">content_copy</span>
                    </button>
                    ${match}
                </div>`;
            });
        });
        
        return processedHtml;
    }

    private copyToClipboard(text: string) {
        navigator.clipboard.writeText(text).then(() => {
            this.showToast('Kopierat till urklipp!');
        }).catch(() => {
            this.showToast('Kunde inte kopiera text', 'error');
        });
    }

    public copyContentBox(boxId: string) {
        const box = document.querySelector(`[data-content="${boxId}"]`);
        if (box) {
            const textContent = box.textContent || '';
            this.copyToClipboard(textContent);
        }
    }

    private showThinkingIndicator() {
        const thinkingDiv = document.createElement('div');
        thinkingDiv.className = 'thinking-indicator';
        thinkingDiv.innerHTML = `
            <span>ByggPilot t√§nker</span>
            <div class="thinking-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        `;
        thinkingDiv.id = 'thinking-indicator';
        this.chatMessages.appendChild(thinkingDiv);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    private removeThinkingIndicator() {
        const thinking = document.getElementById('thinking-indicator');
        if (thinking) thinking.remove();
    }

    private async sendMessage() {
        const userInput = this.chatInput.value.trim();
        if ((!userInput && this.state.attachedFiles.length === 0) || !this.isAiReady) return;

        this.addMessage(userInput, 'user');
        this.chatInput.value = '';
        
        // L√§gg till meddelandet i chat-historiken
        this.chatHistory.push({
            role: 'user',
            content: userInput,
            attachments: this.state.attachedFiles.length > 0 ? 
                await Promise.all(this.state.attachedFiles.map(fileToSafePart)) : undefined
        });
        
        // Visa "t√§nker"-indikator enligt specifikation
        this.showThinkingIndicator();
        
        this.loadingIndicator.style.display = 'inline-block';
        this.sendIcon.style.display = 'none';
        this.sendButton.disabled = true;

        try {
            // Bygg meddelanden f√∂r API-anropet (inklusive attachments om det finns)
            const messages = this.chatHistory.map(msg => ({
                role: msg.role,
                content: msg.content
            }));

            // L√§gg till anv√§ndarkontext om inloggad
            let contextPrefix = '';
            if (this.state.user.isLoggedIn && this.state.user.email) {
                contextPrefix = `[Anv√§ndarkontext: Anv√§ndaren √§r inloggad som ${this.state.user.email} och har gett √•tkomst till Google Kalender och Gmail.]\n\n`;
            }

            // S√§kert AI-anrop via Netlify Function
            const response = await fetch('/.netlify/functions/gemini', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: messages,
                    prompt: contextPrefix + userInput
                })
            });

            if (!response.ok) {
                throw new Error(`AI service error: ${response.status}`);
            }

            const aiResponse: SafeAIResponse = await response.json();
            
            this.removeThinkingIndicator();
            
            if (aiResponse.success && aiResponse.response) {
                this.addMessage(aiResponse.response, 'ai');
                
                // L√§gg till AI-svaret i historiken
                this.chatHistory.push({
                    role: 'assistant',
                    content: aiResponse.response
                });
            } else {
                this.addMessage("Jag fick inget svar fr√•n AI-tj√§nsten: " + (aiResponse.error || 'Ok√§nt fel'), 'ai', true);
            }
        } catch (error) {
            console.error("‚ùå Secure AI API error:", error);
            this.removeThinkingIndicator();
            this.addMessage("Urs√§kta, n√•got gick fel med anslutningen till AI:n.", 'ai', true);
        } finally {
            this.state.attachedFiles = [];
            this.renderAttachedFiles();
            this.loadingIndicator.style.display = 'none';
            this.sendIcon.style.display = 'inline-block';
            this.sendButton.disabled = false;
            this.chatInput.focus();
        }
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    // Dold Firebase-initialisering utan synlig laddningsindikator
    // (anv√§ndaren ska inte se teknisk laddning)
    
    try {
        // Tyst Firebase-initialisering i bakgrunden
        console.log('üî• Initializing Firebase...');
        await initializeFirebase();
        console.log('‚úÖ Firebase ready! Starting ByggPilot app...');
        
        // Starta applikationen direkt
        const app = new ByggPilotApp();
        
        // G√∂r kopieringsfunktionen globalt tillg√§nglig enligt specifikation
        (window as any).byggpilot = {
            copyContentBox: (boxId: string) => app.copyContentBox(boxId)
        };
        
    } catch (error) {
        console.error('‚ùå Critical Firebase initialization failed:', error);
        
        // Skapa diskret felmeddelande endast vid kritiskt fel
        const errorElement = document.createElement('div');
        errorElement.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                        background: #fff3cd; color: #856404; padding: 20px; border-radius: 10px; 
                        box-shadow: 0 4px 12px rgba(0,0,0,0.1); text-align: center; z-index: 10000;
                        border: 1px solid #ffeaa7;">
                <h3>‚ö†Ô∏è Anslutningsproblem</h3>
                <p>Firebase kunde inte initialiseras. Vissa funktioner kan vara begr√§nsade.</p>
                <button onclick="location.reload()" style="margin-top: 10px; padding: 8px 16px; 
                        background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
                    F√∂rs√∂k igen
                </button>
            </div>
        `;
        document.body.appendChild(errorElement);
    }
});