{
  "version": 3,
  "sources": ["../../../../OneDrive/Desktop/byggpilot-nya/netlify/functions/google-workspace.js"],
  "sourceRoot": "C:/Users/usbmi/AppData/Local/Temp/tmp-2752-t3fdnaybc86u",
  "sourcesContent": ["const { google } = require('googleapis');\r\n\r\nexports.handler = async (event, context) => {\r\n  // Only allow POST requests\r\n  if (event.httpMethod !== 'POST') {\r\n    return {\r\n      statusCode: 405,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify({ error: 'Method not allowed' }),\r\n    };\r\n  }\r\n\r\n  try {\r\n    const { projectId, taskId, taskData, userId, action } = JSON.parse(event.body);\r\n\r\n    // Basic validation\r\n    if (!userId) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify({ error: 'User ID is required' }),\r\n      };\r\n    }\r\n\r\n    // Here you would typically:\r\n    // 1. Verify the user's authentication token\r\n    // 2. Get the user's Google OAuth tokens from your database\r\n    // 3. Use those tokens to authenticate with Google APIs\r\n\r\n    // For now, we'll return a success response\r\n    // In a full implementation, you would:\r\n\r\n    if (action === 'update_task') {\r\n      // Example: Update a Google Sheets row\r\n      // const sheets = google.sheets({ version: 'v4', auth: oAuth2Client });\r\n      // await sheets.spreadsheets.values.update({...});\r\n      \r\n      console.log(`Updating task ${taskId} for project ${projectId}`);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          success: true,\r\n          message: 'Task updated successfully',\r\n          taskId,\r\n          projectId\r\n        }),\r\n      };\r\n    }\r\n\r\n    if (action === 'upload_file') {\r\n      // Example: Upload file to Google Drive\r\n      // const drive = google.drive({ version: 'v3', auth: oAuth2Client });\r\n      // await drive.files.create({...});\r\n      \r\n      console.log(`Uploading file for project ${projectId}`);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          success: true,\r\n          message: 'File uploaded successfully',\r\n          projectId\r\n        }),\r\n      };\r\n    }\r\n\r\n    if (action === 'create_calendar_event') {\r\n      // Example: Create Google Calendar event\r\n      // const calendar = google.calendar({ version: 'v3', auth: oAuth2Client });\r\n      // await calendar.events.insert({...});\r\n      \r\n      console.log(`Creating calendar event for project ${projectId}`);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          success: true,\r\n          message: 'Calendar event created successfully',\r\n          projectId\r\n        }),\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 400,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify({ error: 'Invalid action specified' }),\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Error in google-workspace function:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify({\r\n        error: 'Internal server error',\r\n        message: 'Something went wrong while processing your request'\r\n      }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": ";;;AAAA,IAAM,EAAE,OAAO,IAAI,QAAQ,YAAY;AAEvC,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC;AAAA,IACtD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,WAAW,QAAQ,UAAU,QAAQ,OAAO,IAAI,KAAK,MAAM,MAAM,IAAI;AAG7E,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,+BAA+B;AAAA,QACjC;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,OAAO,sBAAsB,CAAC;AAAA,MACvD;AAAA,IACF;AAUA,QAAI,WAAW,eAAe;AAK5B,cAAQ,IAAI,iBAAiB,MAAM,gBAAgB,SAAS,EAAE;AAE9D,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,+BAA+B;AAAA,UAC/B,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,SAAS;AAAA,UACT;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,WAAW,eAAe;AAK5B,cAAQ,IAAI,8BAA8B,SAAS,EAAE;AAErD,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,+BAA+B;AAAA,UAC/B,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,SAAS;AAAA,UACT;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,WAAW,yBAAyB;AAKtC,cAAQ,IAAI,uCAAuC,SAAS,EAAE;AAE9D,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,+BAA+B;AAAA,UAC/B,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,SAAS;AAAA,UACT;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,OAAO,2BAA2B,CAAC;AAAA,IAC5D;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,uCAAuC,KAAK;AAC1D,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,QACP,+BAA+B;AAAA,MACjC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
