{
  "version": 3,
  "sources": ["../../../../OneDrive/Desktop/byggpilot-nya/netlify/functions/get-firebase-config.js"],
  "sourceRoot": "C:/Users/usbmi/AppData/Local/Temp/tmp-2752-hYViwCqpo96f",
  "sourcesContent": ["// netlify/functions/get-firebase-config.js\r\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\r\n\r\n// En hj\u00E4lpfunktion f\u00F6r att h\u00E4mta EN hemlighet\r\nconst fetchSecret = async (secretClient, projectId, secretName) => {\r\n  const name = `projects/${projectId}/secrets/${secretName}/versions/latest`;\r\n  try {\r\n    const [version] = await secretClient.accessSecretVersion({ name });\r\n    return version.payload.data.toString();\r\n  } catch (error) {\r\n    console.error(`\u274C Failed to fetch secret: ${secretName}`, error.message);\r\n    // Returnera null om en enskild hemlighet inte hittas, s\u00E5 att vi kan ge ett b\u00E4ttre felmeddelande\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const handler = async (event, context) => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Access-Control-Allow-Origin': '*', // \u00C4ndra till din dom\u00E4n i produktion f\u00F6r \u00F6kad s\u00E4kerhet\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'GET, OPTIONS'\r\n  };\r\n\r\n  // Handle preflight requests\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: ''\r\n    };\r\n  }\r\n\r\n  // Endast GET requests till\u00E5tna\r\n  if (event.httpMethod !== 'GET') {\r\n    return {\r\n      statusCode: 405,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Method not allowed',\r\n        details: 'Only GET requests are supported'\r\n      })\r\n    };\r\n  }\r\n\r\n  console.log('\uD83D\uDD27 Initializing Firebase config retrieval from Secret Manager');\r\n\r\n  // F\u00F6rs\u00F6k att l\u00E4sa och parsa credentials\r\n  let credentials;\r\n  if (!process.env.GOOGLE_CREDENTIALS) {\r\n    console.error('\u274C GOOGLE_CREDENTIALS environment variable not found');\r\n    return { \r\n      statusCode: 500, \r\n      headers, \r\n      body: JSON.stringify({ \r\n        error: 'Server configuration error',\r\n        details: 'Google credentials not configured'\r\n      }) \r\n    };\r\n  }\r\n\r\n  try {\r\n    credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);\r\n    console.log('\u2705 Successfully parsed Google credentials');\r\n  } catch (e) {\r\n    console.error('\u274C Failed to parse GOOGLE_CREDENTIALS:', e.message);\r\n    return { \r\n      statusCode: 500, \r\n      headers, \r\n      body: JSON.stringify({ \r\n        error: 'Server configuration error',\r\n        details: 'Invalid credentials format'\r\n      }) \r\n    };\r\n  }\r\n\r\n  try {\r\n    // Skapa klienten\r\n    const secretClient = new SecretManagerServiceClient({ \r\n      credentials: credentials,\r\n      projectId: credentials.project_id\r\n    });\r\n    const projectId = credentials.project_id;\r\n    \r\n    console.log(`\u2705 Secret Manager client initialized for project: ${projectId}`);\r\n    \r\n    // Lista \u00F6ver alla Firebase-nycklar vi beh\u00F6ver h\u00E4mta\r\n    const secretsToFetch = [\r\n      'FIREBASE_API_KEY',\r\n      'FIREBASE_AUTH_DOMAIN',\r\n      'FIREBASE_PROJECT_ID',\r\n      'FIREBASE_STORAGE_BUCKET',\r\n      'FIREBASE_MESSAGING_SENDER_ID',\r\n      'FIREBASE_APP_ID'\r\n    ];\r\n\r\n    console.log('\uD83D\uDD0D Fetching Firebase secrets:', secretsToFetch);\r\n\r\n    // H\u00E4mta alla hemligheter parallellt\r\n    const secretPromises = secretsToFetch.map(secretName => \r\n      fetchSecret(secretClient, projectId, secretName)\r\n    );\r\n    const resolvedSecrets = await Promise.all(secretPromises);\r\n    \r\n    // Kontrollera om n\u00E5gon hemlighet misslyckades att h\u00E4mta\r\n    const failedSecrets = secretsToFetch.filter((name, index) => resolvedSecrets[index] === null);\r\n    \r\n    if (failedSecrets.length > 0) {\r\n      console.error('\u274C Failed to retrieve secrets:', failedSecrets);\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({ \r\n          error: 'Failed to retrieve all necessary Firebase secrets',\r\n          details: `Missing secrets: ${failedSecrets.join(', ')}`,\r\n          missingSecrets: failedSecrets\r\n        })\r\n      };\r\n    }\r\n\r\n    // Bygg det f\u00E4rdiga konfigurationsobjektet\r\n    const firebaseConfig = {\r\n      apiKey:            resolvedSecrets[0],\r\n      authDomain:        resolvedSecrets[1],\r\n      projectId:         resolvedSecrets[2],\r\n      storageBucket:     resolvedSecrets[3],\r\n      messagingSenderId: resolvedSecrets[4],\r\n      appId:             resolvedSecrets[5]\r\n    };\r\n\r\n    // Validera att alla v\u00E4rden finns\r\n    const missingValues = Object.entries(firebaseConfig)\r\n      .filter(([key, value]) => !value || value.trim() === '')\r\n      .map(([key]) => key);\r\n\r\n    if (missingValues.length > 0) {\r\n      console.error('\u274C Firebase config has empty values:', missingValues);\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({ \r\n          error: 'Incomplete Firebase configuration',\r\n          details: `Empty values for: ${missingValues.join(', ')}`,\r\n          emptyFields: missingValues\r\n        })\r\n      };\r\n    }\r\n\r\n    console.log('\u2705 Successfully retrieved complete Firebase configuration');\r\n    console.log(`   - API Key length: ${firebaseConfig.apiKey.length}`);\r\n    console.log(`   - Auth Domain: ${firebaseConfig.authDomain}`);\r\n    console.log(`   - Project ID: ${firebaseConfig.projectId}`);\r\n\r\n    // Skicka det kompletta objektet till frontend\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: JSON.stringify({\r\n        ...firebaseConfig,\r\n        // L\u00E4gg till metadata f\u00F6r debugging\r\n        _metadata: {\r\n          retrievedAt: new Date().toISOString(),\r\n          project: projectId,\r\n          secretsRetrieved: secretsToFetch.length\r\n        }\r\n      })\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Unexpected error in get-firebase-config:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? error.message : 'Failed to retrieve Firebase configuration',\r\n        timestamp: new Date().toISOString()\r\n      })\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
